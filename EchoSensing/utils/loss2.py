# YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
"""
Loss functions
"""

import torch
import torch.nn as nn

from utils.metrics import bbox_iou
from utils.torch_utils import de_parallel
# add
import torch.nn.functional as F


def smooth_BCE(eps=0.1):  # https://github.com/ultralytics/yolov3/issues/238#issuecomment-598028441
    # return positive, negative label smoothing BCE targets
    return 1.0 - 0.5 * eps, 0.5 * eps


class BCEBlurWithLogitsLoss(nn.Module):
    # BCEwithLogitLoss() with reduced missing label effects.
    def __init__(self, alpha=0.05):   # bceÁöÑËØùÂèØ‰ª•ËÆ≠ÁªÉÂú®‰∏Ä‰∏™Ê†ºÁÇπÂ≠òÂú®Â§ö‰∏™Á±ªÔºåce‰∏Ä‰∏™Ê†ºÁÇπÂ∞±Â∞±‰∏Ä‰∏™Á±ª
        super().__init__()
        self.loss_fcn = nn.BCEWithLogitsLoss(reduction='none')  # must be nn.BCEWithLogitsLoss()
        self.alpha = alpha

    """
       torch.exp()ÂáΩÊï∞Â∞±ÊòØÊ±ÇeÁöÑÂ§öÂ∞ëÊ¨°Êñπ  ËæìÂÖ•tensorÊØè‰∏Ä‰∏™ÂÖÉÁ¥†ÁªèËøáËÆ°ÁÆó‰πãÂêéËøîÂõûÂØπÂ∫îÁöÑtensor
       Ê†πÊçÆ‰∏ãÂºè ÂØπ‰∫éÊ≠£Â∏∏ÁöÑËæÉÂ§ßÊ¶ÇÁéáÁöÑÊ†∑Êú¨ dxÂØπÂ∫îÂÄº‰∏∫ÁªùÂØπÂÄºËæÉÂ∞è‰∏Ä‰∏™Ë¥üÊï∞ ÂÅáËÆæ‰∏∫-0.12ÔºåÂàô-1‰∏∫-1.12Èô§0.05 ‰∏∫-22.4Ôºå
       -22.4 ÊåáÊï∞Âåñ‰πãÂêé‰∏∫‰∏Ä‰∏™ÂæàÂ∞èÂæàÂ∞èÁöÑÊ≠£Êï∞Ôºå1-ËØ•Ê≠£Êï∞‰πãÂêéÂæóÂà∞ÁöÑÂÄºËæÉÂ§ß ÂÜçÂú®loss‰∏≠‰πò‰∏ä‰πãÂêéÂΩ±ÂìçÂæÆ‰πéÂÖ∂ÂæÆ
       ËÄåÂØπ‰∫émissingÁöÑÊ†∑Êú¨ dxÂØπÂ∫î‰∏∫‰∏Ä‰∏™Á®çÂ§ßÁöÑÊ≠£Êï∞ Â¶Ç0.3 ÂáèÂéª1‰πãÂêé‰∏∫-0.7 Èô§‰ª•0.05 ‰∏∫ -14
       -14Áõ∏ÊØî-22.4ÂÄº‰∏∫ÊåáÊï∞Á∫ßÂ¢ûÂ§ßÔºåÂõ†Ê≠§ÂØπÂ∫îÁöÑalpha_factorÁõ∏ÊØîÊ≠£Â∏∏Ê†∑Êú¨ÊòæËëóÂáèÂ∞è Âú®loss‰∏≠ËæÉÂ∞èËÄÉËôë
   """
    def forward(self, pred, true):
        loss = self.loss_fcn(pred, true)  # ‰∫åÂÄº‰∫§ÂèâÂïÜ
        pred = torch.sigmoid(pred)  # prob from logits
        dx = pred - true  # reduce only missing label effects
        # dx = (pred - true).abs()  # reduce missing label and false label effects
        alpha_factor = 1 - torch.exp((dx - 1) / (self.alpha + 1e-4))
        loss *= alpha_factor
        return loss.mean()


class FocalLoss(nn.Module):
    # Wraps focal loss around existing loss_fcn(), i.e. criteria = FocalLoss(nn.BCEWithLogitsLoss(), gamma=1.5)
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # must be nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # required to apply FL to each element

    def forward(self, pred, true):
        loss = self.loss_fcn(pred, true)
        # p_t = torch.exp(-loss)
        # loss *= self.alpha * (1.000001 - p_t) ** self.gamma  # non-zero power for gradient stability

        # TF implementation https://github.com/tensorflow/addons/blob/v0.7.1/tensorflow_addons/losses/focal_loss.py
        pred_prob = torch.sigmoid(pred)  # prob from logits
        p_t = true * pred_prob + (1 - true) * (1 - pred_prob)
        alpha_factor = true * self.alpha + (1 - true) * (1 - self.alpha)
        modulating_factor = (1.0 - p_t) ** self.gamma
        loss *= alpha_factor * modulating_factor

        if self.reduction == 'mean':
            return loss.mean()
        elif self.reduction == 'sum':
            return loss.sum()
        else:  # 'none'
            return loss

# QFL:Â∞ÜIOU‰Ωú‰∏∫ÂàÜÁ±ªÁöÑÁõëÁù£‰ø°Âè∑
class QFocalLoss(nn.Module):
    # Wraps Quality focal loss around existing loss_fcn(), i.e. criteria = FocalLoss(nn.BCEWithLogitsLoss(), gamma=1.5)
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # must be nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # required to apply FL to each element

    def forward(self, pred, true):
        loss = self.loss_fcn(pred, true)

        pred_prob = torch.sigmoid(pred)  # prob from logits
        alpha_factor = true * self.alpha + (1 - true) * (1 - self.alpha)
        modulating_factor = torch.abs(true - pred_prob) ** self.gamma
        loss *= alpha_factor * modulating_factor

        if self.reduction == 'mean':
            return loss.mean()
        elif self.reduction == 'sum':
            return loss.sum()
        else:  # 'none'
            return loss

# QFL:Â∞ÜIOU‰Ωú‰∏∫ÂàÜÁ±ªÁöÑÁõëÁù£‰ø°Âè∑
class QFocalLossT(nn.Module):
    # Wraps Quality focal loss around existing loss_fcn(), i.e. criteria = FocalLoss(nn.BCEWithLogitsLoss(), gamma=1.5)
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # must be nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # required to apply FL to each element

    def forward(self, pred, true): # pre:[]
        assert len(true) == 2, """target for QFL must be a tuple of two elements,
                including category label and quality label, respectively"""
        label, score = true
        pred_sigmoid = pred.sigmoid()  # [177,4] ÂàÜÊï∞È¢ÑÊµã
        scale_factor = pred_sigmoid
        # ËÆ°ÁÆóË¥üÊ†∑Êú¨
        zerolabel = scale_factor.new_zeros(pred.shape)  # [N,c]
        loss = self.loss_fcn(pred, zerolabel)* scale_factor.pow(self.gamma)
        # ËÆ°ÁÆóÊ≠£Ê†∑Êú¨ÔºåYOLOV5‰∏≠Ê≤°ÊúâËÉåÊôØÊ†∑Êú¨ÔºåËÆæÁΩÆ‰∫ÜÁΩÆ‰ø°Â∫¶ÊçüÂ§±
        # FG cat_id: [0, num_classes -1], BG cat_id: num_classes
        bg_class_ind = pred.shape[1]
        # pos = ((label >= 0) & (label < bg_class_ind)).nonzero().squeeze(1)  # Ê≠£Ê†∑Êú¨
        #pos = label>0
        pos = (label > 0).nonzero().squeeze(1)
        i,j = pos[:,0],pos[:,1]
        #pos_label = label[].Long()  # [pos,]
        # positives are supervised by bbox quality (IoU) scoreÔºåÊ≠£Ê†∑Êú¨ÁöÑ
        scale_factor = score[j] - pred_sigmoid[i,j]
        loss[i,j] = F.binary_cross_entropy_with_logits(
            pred[i,j], score[j],
            reduction='none') * scale_factor.abs().pow(self.gamma)
        n = pred.shape[0]*pred.shape[1]
        loss = loss.sum(dim=1, keepdim=False)
        loss = loss.sum(dim=0)/n
        return loss

# QFL:Â∞ÜIOU‰Ωú‰∏∫ÂàÜÁ±ªÁöÑÁõëÁù£‰ø°Âè∑
class VFocalLossT(nn.Module):
    # Wraps Quality focal loss around existing loss_fcn(), i.e. criteria = FocalLoss(nn.BCEWithLogitsLoss(), gamma=1.5)
    def __init__(self, loss_fcn, gamma=1.5, alpha=0.25):
        super().__init__()
        self.loss_fcn = loss_fcn  # must be nn.BCEWithLogitsLoss()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = loss_fcn.reduction
        self.loss_fcn.reduction = 'none'  # required to apply FL to each element

    def forward(self, pred, true): # pre:[]
        assert len(true) == 2, """target for QFL must be a tuple of two elements,
                including category label and quality label, respectively"""
        label, score = true
        pred_sigmoid = pred.sigmoid()  # [177,4] ÂàÜÊï∞È¢ÑÊµã
        scale_factor = pred_sigmoid* (1-self.alpha)
        # ËÆ°ÁÆóË¥üÊ†∑Êú¨
        zerolabel = scale_factor.new_zeros(pred.shape)  # [N,c]
        loss = self.loss_fcn(pred, zerolabel)* scale_factor.pow(self.gamma)
        # ËÆ°ÁÆóÊ≠£Ê†∑Êú¨ÔºåYOLOV5‰∏≠Ê≤°ÊúâËÉåÊôØÊ†∑Êú¨ÔºåËÆæÁΩÆ‰∫ÜÁΩÆ‰ø°Â∫¶ÊçüÂ§±
        # FG cat_id: [0, num_classes -1], BG cat_id: num_classes
        bg_class_ind = pred.shape[1]
        # pos = ((label >= 0) & (label < bg_class_ind)).nonzero().squeeze(1)  # Ê≠£Ê†∑Êú¨
        #pos = label>0
        pos = (label > 0).nonzero().squeeze(1)
        i,j = pos[:,0],pos[:,1]
        #pos_label = label[].Long()  # [pos,]
        # positives are supervised by bbox quality (IoU) scoreÔºåÊ≠£Ê†∑Êú¨ÁöÑ
        scale_factor = score[j]
        loss[i,j] = F.binary_cross_entropy_with_logits(
            pred[i,j], score[j],
            reduction='none') * scale_factor
        n = pred.shape[0]*pred.shape[1]
        loss = loss.sum(dim=1, keepdim=False)
        loss = loss.sum(dim=0)/n
        return loss

class ComputeLoss:
    sort_obj_iou = False

    # Compute losses
    def __init__(self, model, autobalance=False):
        device = next(model.parameters()).device  # get model device
        h = model.hyp  # hyperparameters

        # Define criteria
        BCEcls = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h['cls_pw']], device=device))
        BCEobj = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h['obj_pw']], device=device))
        # add by my self
        # BCEcls = BCEBlurWithLogitsLoss()
        # BCEobj = BCEBlurWithLogitsLoss()

        # Class label smoothing https://arxiv.org/pdf/1902.04103.pdf eqn 3
        self.cp, self.cn = smooth_BCE(eps=h.get('label_smoothing', 0.0))  # positive, negative BCE targets

        # Focal loss
        g = h['fl_gamma']  # focal loss gamma
        if g > 0:
            #BCEcls, BCEobj = FocalLoss(BCEcls, g), FocalLoss(BCEobj, g)
            BCEcls, BCEobj = VFocalLossT(BCEcls, g), BCEobj  # VFocalLossT

        m = de_parallel(model).model[-1]  # Detect() module
        self.balance = {3: [4.0, 1.0, 0.4]}.get(m.nl, [4.0, 1.0, 0.25, 0.06, 0.02])  # P3-P7
        self.ssi = list(m.stride).index(16) if autobalance else 0  # stride 16 index
        self.BCEcls, self.BCEobj, self.gr, self.hyp, self.autobalance = BCEcls, BCEobj, 1.0, h, autobalance
        self.na = m.na  # number of anchors
        self.nc = m.nc  # number of classes
        self.nl = m.nl  # number of layers
        self.anchors = m.anchors
        self.device = device

    def __call__(self, p, targets):  # predictions, targets
        lcls = torch.zeros(1, device=self.device)  # class loss
        lbox = torch.zeros(1, device=self.device)  # box loss
        lobj = torch.zeros(1, device=self.device)  # object loss
        # [class,(tx,ty,tw,th),(img_index,anchor_index,grid_indices),anchor_type],‰∏Ä‰∏™ÁâπËÆ∏ËØÅÂ±Ç‰∏Ä‰∏™ÂàóË°®
        tcls, tbox, indices, anchors = self.build_targets(p, targets)  # targets

        # Losses pi:[B,NUM_ANCHOR,H,W,C(5+classes)]
        for i, pi in enumerate(p):  # layer index, layer predictions
            # b:‰∏Ä‰∏™BATCHÈáåÁöÑÁ¥¢Âºï[NUM_P,BATCH]
            b, a, gj, gi = indices[i]  # image, anchor, gridy, gridx
            tobj = torch.zeros(pi.shape[:4], dtype=pi.dtype, device=self.device)  # target obj

            n = b.shape[0]  # number of targets
            if n: # pi:[batch,anchor_nums,feat_h,feat_w,class+5]->[n,class+5]:Âú®ÂØπÂ∫îÁöÑ‰ΩçÁΩÆ‰∏äÂèñÂá∫Áõ∏Â∫îÁöÑÈ¢ÑÊµãÊï∞ÂÄº,
                # pxy, pwh, _, pcls = pi[b, a, gj, gi].tensor_split((2, 4, 5), dim=1)  # faster, requires torch 1.8.0
                # PXY:[NUM_P,2]
                pxy, pwh, _, pcls = pi[b, a, gj, gi].split((2, 2, 1, self.nc), 1)  # target-subset of predictions

                # Regression È¢ÑÊµãÁöÑÊòØÊúâÂΩí‰∏ÄÂåñÁöÑÂÅèÁßªÂÄº,ËøôÈáåËøõË°å‰∫Üsigmoid
                pxy = pxy.sigmoid() * 2 - 0.5   # ÂÖ¨Âºè,Ê≤°Êúâ+Â∑¶‰∏äËßíÂùêÊ†á
                pwh = (pwh.sigmoid() * 2) ** 2 * anchors[i]  # Áî±ÂÅèÁßªÂÄºËΩ¨Êç¢‰∏∫‰∫ÜÂØπÂ∫îÁâπÂæÅÂÄºÁöÑÂÅöÊ†áÂøó
                pbox = torch.cat((pxy, pwh), 1)  # predicted box
                iou = bbox_iou(pbox, tbox[i], CIoU=True).squeeze()  # iou(prediction, target)
                # iou = bbox_iou(pbox.T, tbox[i], x1y1x2y2=False, CIoU=True, alpha=3)  # add by myself
                lbox += (1.0 - iou).mean()  # iou loss

                # Objectness
                iou = iou.detach().clamp(0).type(tobj.dtype)
                if self.sort_obj_iou:
                    j = iou.argsort()
                    b, a, gj, gi, iou = b[j], a[j], gj[j], gi[j], iou[j]
                if self.gr < 1:
                    iou = (1.0 - self.gr) + self.gr * iou
                tobj[b, a, gj, gi] = iou  # iou ratio,# Â∞ÜIOU ‰Ωú‰∏∫

                # Classification,self.cn=0,self.cp=1
                if self.nc > 1:  # cls loss (only if multiple classes)
                    t = torch.full_like(pcls, self.cn, device=self.device)  # targets
                    t[range(n), tcls[i]] = self.cp  # # Á≠õÈÄâÂà∞ÁöÑÊ≠£Ê†∑Êú¨ÂØπÂ∫î‰ΩçÁΩÆÂÄºÊòØcp,[NUM_P,CLASSES],Áõ∏ÂΩì‰∫éONE-HOT
                    #lcls += self.BCEcls(pcls, t)  # BCE
                    # ÊääÂàÜÁ±ªLOSS ÊîπÊàê QFLOSS
                    target = (t,iou)
                    lcls += self.BCEcls(pcls, target)
                # Append targets to text file
                # with open('targets.txt', 'a') as file:
                #     [file.write('%11.5g ' * 4 % tuple(x) + '\n') for x in torch.cat((txy[i], twh[i]), 1)]

            obji = self.BCEobj(pi[..., 4], tobj)   # ÁΩÆ‰ø°Â∫¶LOSS
            # balanceÁî®Êù•ËÆæÁΩÆ‰∏â‰∏™feature mapÂØπÂ∫îËæìÂá∫ÁöÑÁΩÆ‰ø°Â∫¶ÊçüÂ§±Á≥ªÊï∞(Âπ≥Ë°°‰∏â‰∏™feature mapÁöÑÁΩÆ‰ø°Â∫¶ÊçüÂ§±)
            lobj += obji * self.balance[i]  # obj loss
            if self.autobalance:
                self.balance[i] = self.balance[i] * 0.9999 + 0.0001 / obji.detach().item()

        if self.autobalance:
            self.balance = [x / self.balance[self.ssi] for x in self.balance]
        lbox *= self.hyp['box']  # ‰πò‰ª•ÊùÉÈáç
        lobj *= self.hyp['obj']
        lcls *= self.hyp['cls']
        bs = tobj.shape[0]  # batch size

        return (lbox + lobj + lcls) * bs, torch.cat((lbox, lobj, lcls)).detach()

    def build_targets(self, p, targets):
        '''
        P:predict->[Ê£ÄÊµãÂ±ÇÊï∞,ANCHOR‰∏™Êï∞,gridspaceÈïø,gridspaceÂÆΩ,Á±ªÂà´Êï∞+5(xywh+obj)],
        target:[num_target,image_index+class+xywh]
        '''
        # Build targets for compute_loss(), input targets(image,class,x,y,w,h)
        na, nt = self.na, targets.shape[0]  # number of anchors, targets
        tcls, tbox, indices, anch = [], [], [], [] # Áî®Êù•Â≠òÊîæÁªìÊûúÁöÑ
        gain = torch.ones(7, device=self.device)  # normalized to gridspace(Â∞±ÊòØËæìÂá∫ÁöÑÊ£ÄÊµãÁâπÂæÅÂ±Ç) ,‰øùÂ≠òÊîæÁº©Âà∞ÁâπÂæÅÂõæÂ§ßÂ∞èÁöÑÂõ†Â≠ê
        ai = torch.arange(na, device=self.device).float().view(na, 1).repeat(1, nt)  # same as .repeat_interleave(nt),
        targets = torch.cat((targets.repeat(na, 1, 1), ai[..., None]), 2)  # append anchor indices,Â§çÂà∂3ÂàÜÂØπÂ∫î3‰∏™ANCHOR
                                                            # [num_anchor,num_target,image_idx+class+xywh+anchor_idx]
        g = 0.5  # bias,ÂÅèÁßªÂÄº
        off = torch.tensor(  # ÂàÜÂà´ÂØπÂ∫î‰∏≠ÂøÉÁÇπ„ÄÅÂ∑¶„ÄÅ‰∏ä„ÄÅÂè≥„ÄÅ‰∏ã
            [
                [0, 0],
                [1, 0],
                [0, 1],
                [-1, 0],
                [0, -1],  # j,k,l,m
                # [1, 1], [1, -1], [-1, 1], [-1, -1],  # jk,jm,lk,lm
            ],
            device=self.device).float() * g  # offsets

        for i in range(self.nl): # ÈÅçÂéÜÊØè‰∏™Ê£ÄÊµãÂ±Ç
            anchors = self.anchors[i]   # Ëé∑ÂèñÁ¨¨IÂ±ÇÁöÑANCHOR
            gain[2:6] = torch.tensor(p[i].shape)[[3, 2, 3, 2]]  # xyxy gain,ÊîæÁº©
            # # gain = [1, 1, ÁâπÂæÅÂõæw, ÁâπÂæÅÂõæ_h, ÁâπÂæÅÂõæw, ÁâπÂæÅÂõæ_h]
            # Match targets to anchors
            t = targets * gain  # shape(3,n,7) # targets‰∏∫ÂΩí‰∏ÄÂåñÁöÑ,‰πò‰ª•ÂΩìÂâçÂ±ÇÂ∞∫Â∫¶Âèò‰∏∫ÂΩìÂâçÂ±ÇÁöÑÂ§ßÂ∞è
            if nt:  # Â¶ÇÊûúÊ£ÄÊµãÂ±Ç‰∏äÊúâÁõÆÊ†á
                # Matches
                r = t[..., 4:6] / anchors[:, None]  # wh ratio
                j = torch.max(r, 1 / r).max(2)[0] < self.hyp['anchor_t']  # compare,.max(2)[0]ËøîÂõûÂÆΩÊØî È´òÊØî‰∏§ËÄÖ‰∏≠ËæÉÂ§ßÁöÑ‰∏Ä‰∏™ÂÄº
                # j = wh_iou(anchors, t[:, 4:6]) > model.hyp['iou_t']  # iou(3,n)=wh_iou(anchors(3,2), gwh(n,2))
                t = t[j]  # filter,[num_Positive_sample,7],ÂàùÊ≠•ÈÄâÊã©Â•Ω‰∫ÜÈÇ£‰∫õanchorsÂØπÂ∫îÊ≠£Ê†∑Êú¨

                # Offsets
                gxy = t[:, 2:4]  # grid xy, # Ê≠£Ê†∑Êú¨ÁöÑxy‰∏≠ÂøÉÂùêÊ†á
                gxi = gain[[2, 3]] - gxy  # inverse  #  ÁâπÂæÅÂõæÁöÑÈïøÂÆΩ-targetsÁöÑ‰∏≠ÂøÉ
                j, k = ((gxy % 1 < g) & (gxy > 1)).T  # <0.5Âêë‰∏ãÂèñ,Â∑¶,‰∏ä
                l, m = ((gxi % 1 < g) & (gxi > 1)).T    # Áõ∏ÂáèÂêé<0.5Âêë‰∏ãÂèñ,Âè≥,‰∏ã
                j = torch.stack((torch.ones_like(j), j, k, l, m))  # ‰∏≠ÂøÉÂä†Â∑¶,‰∏ä,Âè≥,‰∏ã,‰∫î‰∏™
                t = t.repeat((5, 1, 1))[j]   # Â§çÂà∂‰∫îÂàÜ,ÂèñÂá∫
                offsets = (torch.zeros_like(gxy)[None] + off[:, None])[j]
            else:
                t = targets[0]
                offsets = 0

            # Define
            bc, gxy, gwh, a = t.chunk(4, 1)  # (image, class), grid xy, grid wh, anchors
            a, (b, c) = a.long().view(-1), bc.long().T  # anchors, image, class
            gij = (gxy - offsets).long()    # ÂØπÂ∫îÂ§ö‰∏™ANCHORÂØπÂ∫î‰∏Ä‰∏™GT,.long()Ë°®Á§∫‰ª•ÁΩëÊ†ºÂ∑¶‰∏äËßíÂùêÊ†áËÆ°ÁÆóÂÅèÁßªÂÄº
            gi, gj = gij.T  # grid indices,ÊääÂùêÊ†áÂàÜÁ¶ªÂºÄ,ËÆ°ÁÆóÊ≠£Ê†∑Êú¨ÂÅèÁßªÂÄºÁöÑÂ∑¶‰∏äËßíÂùêÊ†á

            # Append
            indices.append((b, a, gj.clamp_(0, gain[3] - 1), gi.clamp_(0, gain[2] - 1)))  # image, anchor, grid indices
            tbox.append(torch.cat((gxy - gij, gwh), 1))  # box,.long()Ë°®Á§∫‰ª•ÁΩëÊ†ºÂ∑¶‰∏äËßíÂùêÊ†áËÆ°ÁÆóÂÅèÁßªÂÄº,ËåÉÂõ¥‰∏∫(0-1)
            anch.append(anchors[a])  # anchors
            tcls.append(c)  # class
            # [class,(tx,ty,tw,th),(img_index,anchor_index,grid_indices),anchor_type]
        return tcls, tbox, indices, anch
